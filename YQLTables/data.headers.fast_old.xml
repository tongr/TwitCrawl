<?xml version='1.0' encoding='UTF-8'?>
<table xmlns:i='http://query.yahooapis.com/v1/schema/internalTable.xsd' xmlns='http://query.yahooapis.com/v1/schema/table.xsd'>
    <meta>
        <author>Marcel Duran</author>
        <description>Request (GET) a URL and retrieves its content (non-binary) and headers. User Agent string (ua) and the xPath expression (xpath) are optional. Additionally, one can choose to return the HTML content as (escaped) string value, iff htmlstr=='true' (i.e., useful in case of JSON format queries)</description>
        <sampleQuery>select * from {table} where url='http://www.yahoo.com/'</sampleQuery>
        <sampleQuery>select * from {table} where url in ('http://www.yahoo.com/','http://www.google.com/') and ua='Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)'</sampleQuery>
        <sampleQuery>select * from {table} where url in ('http://www.yahoo.com/','http://www.google.com/') and ua='Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)' and xpath='//a' and htmlstr='true'</sampleQuery>
    </meta>
    <bindings>
        <select itemPath='' produces='XML'>
            <inputs>
               <key id='url' type='xs:string' paramType='variable' required='true'/>
               <key id='ua' type='xs:string' paramType='variable' required='false'/>
               <key id='xpath' type='xs:string' paramType='variable' required='false' />
               <key id='htmlstr' type='xs:string' paramType='variable' required='false' default='false' />
            </inputs>
            <execute>
                <![CDATA[
                    var req, resp, header, tag, redirect, location, redir, count, content,
                        data = <resources/>,
                        headers = <headers/>;

var execRequest = function(cType) {
                    req = y.rest(url);

                    /* set user agent */
                    if (ua) {
                        req.header('User-Agent', ua);
                    }
                    req.accept(cType);

                    /* compression */
                    req.header('Accept-Encoding', 'gzip,deflate');
                    req.decompress(true);

                    /* bad servers don't set charset */
                    /* YQL tries UTF-8 first then we try ISO as a fallback */
                    req.fallbackCharset('ISO-8859-1');

                    /* fetch url */
                    resp = req.get();
                    
                    /* necessary to fetch actual content (some lazy/async loading seems to be involved) */
                    if(!resp.response) {
                        /* actually nothing important to do here */
                        y.log('no response for ' + url);
                    }
                    
                    return req;
};
var plaincontent = false;
try {
    req = execRequest( 'text/html' );
} catch (err) {
    var msg = JSON.stringify(err);
    if(err.message) {
        msg = JSON.stringify(err.message);
    }
    /* y.log(msg); */
    /* try to ignore jTidy exceptions */
    if(htmlstr=='true' && (!xpath || xpath=='') && ( msg.indexOf('The content of elements must consist of well-formed character data or markup.') >= 0 || msg.indexOf('tidy') >= 0  ) ) {
            /* y.log('error: ' + msg); y.log('retrying...'); */
            /* trying to run this w/o jTidy (it changes the HTML content such that problems might occur, i.e., removing html comments within css tags */
            plaincontent = true;
            req = execRequest(null);
    } else {
        throw err;
    }
}
                    /* check redirect */
                    redirect = y.diagnostics.redirect;
                    count = redirect && redirect.length();
                    
                    var contentURL = url;
                    if (count) {
                        var redirectInfo = {};
                        for (var i = 0; i < count; i += 1) {
                            var redir = redirect[i];
                            var fromLocation = redir.@from;
                            var toLocation = redir.toString();
                            if(fromLocation&&toLocation) {
                                redirectInfo[fromLocation] = toLocation;
                            }
                        }
                        
                        var redirectPath = [contentURL];
                        while(redirectInfo[contentURL]!=undefined && redirectInfo[contentURL]!=contentURL) {
                            contentURL = redirectInfo[contentURL];
                            redirectPath.push(contentURL);
                        }
                        var relevantRedirectInfo = {};
                        for (var i = 0; i < redirectPath.length-1; i += 1) {
                            relevantRedirectInfo[redirectPath[i]] = redirectInfo[redirectPath[i]];
                        }
                        
                        for(var from in relevantRedirectInfo){
                            var to = relevantRedirectInfo[from];
                            
                            data.resources +=
                                    <redirect>
                                        <from>{from}</from>
                                        <to>{to}</to>
                                    </redirect>;
                        }
                    }

                    /* get headers */
                    headers.headers = y.jsonToXml(resp.headers);

                    /* set result */
                    data.resources += <url>{contentURL}</url>;
                    data.resources += <status>{resp.status}</status>;
                    data.resources += headers;

                    /* get uncompressed response content for non-binary */
                    header = resp.headers;
                    header = (header && header['content-type']) || '';

                    if (header.indexOf('image') < 0 && header.indexOf('x-shockwave-flash') < 0) {

                        try {
content = resp.response;
/* in case of plain content: do not try to do fancy suff with the data */
if(!plaincontent) {
                            /* apply the xpath expression */
                            if (xpath) content = y.xpath(content, xpath);

                            /* return html content as string */
                            if(htmlstr=='true') content = content.toXMLString();
}
                        } catch (err) {
                            y.log(err);
                            /* empty response on error */
                            content = '';
                        }
                    } else {
                        /* empty response for binaries */
                        content = '';
                    }

                    data.resources += <content>{content}</content>;

                    response.maxAge = 300;
                    response.object = data;
                ]]>
            </execute>
        </select>
    </bindings>
</table>
